// *--------------------------------*- C++ -*--------------engine:jinja2-----------------*\
type             codedFixedValue;
value            uniform (0 0 0);
name             lowerWallTranspiration;

codeOptions
#{
    -I$(LIB_SRC)/finiteVolume/lnInclude \
    -I$(LIB_SRC)/meshTools/lnInclude
#};

codeLibs
#{
    -lmeshTools \
    -lfiniteVolume
#};


codeInclude
#{
    #include "fvCFD.H"
    #include <cmath>
    #include <iostream>
    #include <complex>
    #include <string>
    #include <fstream>
    #include <vector>
#};

code
#{

         // Define parameters
        double w = 0.28175739321266047;
        // double w3d = 0.95;
        // double H = std::stod(parameters["H"]);
        // double Ucl = std::stod(parameters["Ucl"]);
        double L = 5.2359;
        double A = 0.01;
        double k = 2 * 3.141592 / L;
        

        // Creating patch and field data
        const fvPatch& boundaryPatch = patch();
        const vectorField& Cf = boundaryPatch.Cf();
        vectorField& U = *this;

        // Getting current time
        double t = this->db().time().value();

        // Ramp function
        double ramp = min(1, t/5);




        // Calculate u average
        // double u_avg = 0;
        // double v_avg = 0;

        // Iterating all face cells
        forAll(Cf, faceI)
        {

            // In a parabolic profile, at y=0, the derivative with y is du(0)/dy = 4
            double ub = 4; 

            // Calculating oscillation and derivative
            double eta = ramp*A*sin(Cf[faceI].x()*k + w*t);
            double d_eta = ramp*A*w*cos(Cf[faceI].x()*k + w*t);
            

            // Calculating velocity components
            double u = -ub*eta;
            double v = d_eta;


            // Setting boundary conditions
            U[faceI] = vector(u,v,0);
        }

#};

// https://www.cfd-online.com/Forums/openfoam-programming-development/204035-patchinternalfield-returning-random-field.html