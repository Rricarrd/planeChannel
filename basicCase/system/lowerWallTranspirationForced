// *--------------------------------*- C++ -*--------------engine:jinja2-----------------*\
type             codedFixedValue;
value            uniform (0 0 0);
name             lowerWallTranspiration;

codeOptions
#{
    -I$(LIB_SRC)/finiteVolume/lnInclude \
    -I$(LIB_SRC)/meshTools/lnInclude
#};

codeLibs
#{
    -lmeshTools \
    -lfiniteVolume
#};


codeInclude
#{
    #include "fvCFD.H"
    #include <cmath>
    #include <iostream>
    #include <complex>
    #include <string>
    #include <fstream>
    #include <vector>
    #include <unordered_map>
    #include <regex>
#};

code
#{

    struct local {

        static double addParabolicProfile(
            double H,
            double Ucl,
            double y)
        {
            return ((4.0 * Ucl / (H * H)) * y * (H - y));
        }


        static std::string trim(const std::string& str) {
            size_t first = str.find_first_not_of(" \t\n\r");
            if (std::string::npos == first) {
                return str;
            }
            size_t last = str.find_last_not_of(" \t\n\r");
            return str.substr(first, (last - first + 1));
        }


        // Helper function to remove comments from a line
        static std::string removeComments(const std::string& line) {
            size_t commentPos = line.find("//");
            if (commentPos != std::string::npos) {
                return line.substr(0, commentPos);
            }
            return line;
        }

        // static du_dy
        // {
        //     // Function to calculate the derivative of u with respect to y
        //     double du_dy = 0.0;
        //     // Perform calculations here
        //     return du_dy;
        // }


    };



         // Define parameters
        double w = 0.2892043982518436;
        // double w3d = 0.95;
        // double H = std::stod(parameters["H"]);
        // double Ucl = std::stod(parameters["Ucl"]);
        double L = 5.2359;
        double A = 0.03;
        double k = 2 * 3.141592 / L;
        

        // Creating patch and field data
        const fvPatch& boundaryPatch = patch();
        const vectorField& Cf = boundaryPatch.Cf();
        vectorField& U = *this;

        // Getting current time
        double t = this->db().time().value();

        // Ramp function
        double ramp = min(1, t/5);

        // Getting velocities at the field cells next to the wall
        const tmp<vectorField>& U_field = patchInternalField();
        // Get the face cells, cell centers and face centers
        const labelList& faceCells = patch().faceCells();
        const tmp<vectorField>& cellCenters = patch().boundaryMesh().mesh().C();


        // Calculate u average
        double u_avg = 0;
        double v_avg = 0;

        // Iterating all face cells
        forAll(Cf, faceI)
        {

            // Distance in y direction from face to first cell center
            double dy = cellCenters()[faceCells[faceI]].y();

            // cout << "dy: " << dy << endl;

            // Normal velocity in y direction
            // double uf = U_field()[faceCells[faceI]].x();
            
            // cout << "uf: " << uf << endl;

            // Gradient of ux with respect to the vertical direction y
            // double ub = uf / dy;

            double ub = 4; // In a parabolic profile, at y=0, the derivative with y is du(0)/dy = 4


            // Calculating oscillation and derivative
            double eta = ramp*A*sin(Cf[faceI].x()*k + w*t);
            double d_eta = ramp*A*w*cos(Cf[faceI].x()*k + w*t);
            

            // Calculating velocity components
            double u = -ub*eta;
            double v = d_eta;

            


            // u_avg += u;
            // v_avg += v;


            // Setting boundary conditions
            U[faceI] = vector(u,v,0);
        }

        // Print average velocity
        // u_avg /= Cf.size();
        // v_avg /= Cf.size();
        // std::cout << "Average velocity: " << u_avg << ", " << v_avg << std::endl;


#};

// https://www.cfd-online.com/Forums/openfoam-programming-development/204035-patchinternalfield-returning-random-field.html