/*-----------------------------*- C++ -*-------engine:jinja2-----------------*\

| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       pointVectorField;
    object      pointDisplacement;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions     [0 1 0 0 0 0 0];

internalField  uniform (0 0 0);

boundaryField
{
  bottom
  {

    

    type             codedFixedValue;
    value            uniform (0 0 0);

    name  movingLowerWallPoints;

    codeOptions
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude
    #};

    codeLibs
    #{
        -lmeshTools \
        -lfiniteVolume
    #};


    codeInclude
    #{
        #include "fvCFD.H"
        #include "pointFields.H"
        #include "primitivePatchInterpolation.H"
        #include <cmath>
        #include <iostream>
        #include <vector>
    #};


    code
    #{
        //- Get this field
        vectorField& field = *this;

        //- Get the cell displacement field
        const volVectorField& cellDisplacement = this->db().lookupObject<volVectorField>("cellDisplacement");
        const fvMesh & mesh  =  cellDisplacement.mesh();
        
        //- PatchID 
        const label patchID = mesh.boundaryMesh().findPatchID("bottom");
        if (patchID < 0)
        {
            FatalError
                << "Cannot find patch named 'bottom'"
                << exit(FatalError);
        }

        //- set-up interpolator
        primitivePatchInterpolation patchInterpolator
        (
            mesh.boundaryMesh()[patchID]
        );

        //- Get cell displacement face values 
        const vectorField& cellDisplacementFaceValues = cellDisplacement.boundaryField()[patchID];

        //- Perform interpolation 
        const vectorField& cellDisplacementFaceValuesInterpolated = patchInterpolator.interpolate(cellDisplacementFaceValues);


        
        Info<< "Updated bottom boundary displacement field" << endl;
    #};

    


  }
  
  top
  {
      type        fixedValue;
      value       uniform (0 0 0);
  }
  

  

        
            "(inlet|outlet)"
            {
                type            fixedValue;
                value           uniform (0 0 0);
            }
            "(left|right)"
            {
                type        cyclic;
            }
        



  
  
}
// ************************************************************************* //