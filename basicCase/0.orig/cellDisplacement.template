/*-----------------------------*- C++ -*-------engine:jinja2-----------------*\

| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      cellDisplacement;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 0 0 0 0 0];
internalField   uniform (0 0 0);

boundaryField
{
  bottom
  {
<<<<<<< HEAD
      type        groovyBC;
      value       uniform (0 0 0);
      variables "A={{amplitude}};k=2*pi/{{L}};w={{omega}};ramp=min(time()/15.0, 1.0);";
      valueExpression "vector(0,ramp*A*sin(k*pos().x + w * time()),0)";
=======

    {% if swak4Foam=="yes"%}
    type        groovyBC;
    value       uniform (0 0 0);
    variables "A={{amplitude}};k=2*pi/{{L-L/nx}};f={{frequency}};ramp=min(time()/15.0, 1.0);";
    valueExpression "vector(0,ramp*A*sin(k*pos().x + f * time()),0)";
  
    {% else %}
    
    type             codedFixedValue;
    value            uniform (0 0 0);

    name  movingLowerWallCells;

    codeOptions
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude
    #};

    codeLibs
    #{
        -lmeshTools \
        -lfiniteVolume
    #};


    codeInclude
    #{
        #include "fvCFD.H"
        #include <cmath>
        #include <iostream>
        #include <vector>
        #include <fstream>
        #include <string>
        #include <regex>
        #include <unordered_map>
    #};

    code
    #{
        // Creating patch and field data
        const fvPatch& boundaryPatch = patch();
        const vectorField& Cf = boundaryPatch.Cf();
        vectorField& field = *this;

        // Getting current time
        double t = this->db().time().value();


        // Set variables
        const scalar A = {{amplitude}};
        const scalar k = 2 * 3.141592 / {{L}};
        const scalar f = {{frequency}};
        const scalar ramp = min(t / 15.0, 1.0);
        const scalarField& X = Cf.component(vector::X);


        // Loop over the faces of the patch
        forAll(Cf, faceI)
        { 
            field[faceI] = vector(0, A * sin(k * X[faceI] + f * t), 0);
        }
    #};

    {% endif %}

>>>>>>> 156e6add5d5146c8352bfc17e16a1abd1f17a87a
  }
  
  top
  {
      type        fixedValue;
      value       uniform (0 0 0);
  }
  
  

  {% if case=="spatial_coded"%}

        {% if dynamicMesh=="sine_lower_wall"%}
            "(inlet|outlet)"
            {
                type            fixedValue;
                value           uniform (0 0 0);
            }
            "(left|right)"
            {
                type        cyclicAMI;
            }
        {% else %}
            "(inlet|outlet)"
            {
                type            fixedValue;
                value           uniform (0 0 0);
            }
            "(left|right)"
            {
                type        cyclic;
            }
        {% endif %}



  {% elif case=="temporal"%}
  
        {% if dynamicMesh=="sine_lower_wall"%}
            "(inlet|outlet)"
            {
                type            cyclicAMI;
            }
            "(left|right)"
            {
                type        cyclicAMI;
            }
        {% else %}
            "(inlet|outlet)"
            {
                type            cyclic;
            }
            "(left|right)"
            {
                type        cyclic;
            }
        {% endif %}

  {% endif %}

  
}
// ************************************************************************* //
